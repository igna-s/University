
{Un sitio de estadísticas deportivas mantiene la información de jugadores del fútbol argentino. Para ello, se dispone de los datos de los partidos jugados en el año 2022. De cada partido se conoce el estadio donde se jugó, los nombres de los 2 equipos que se enfrentaron, la fecha (ej. ‘2022/03/28’) y la información de los jugadores que participaron del encuentro. De cada jugador se conoce su nombre y apellido, su DNI, posición (arquero, defensa, mediocampo o delantero) y un puntaje otorgado por un crítico deportivo (1..10). Esta información no tiene ningún orden específico. 
Se pide: 
a) Crear una nueva estructura que almacene para cada jugador, su DNI, su nombre y apellido, posición, y la fecha junto al puntaje obtenido para cada partido del que participó. Esta estructura debe estar ordenada por DNI, y debe ser eficiente para la búsqueda por dicho criterio. 
Al finalizar el procesamiento de a), elija las estructuras adecuadas para:
b) Implementar un módulo que informe por pantalla los datos de cada jugador y su puntaje total acumulado entre todos los partidos. El listado debe estar ordenado por DNI de manera descendente.
c) Implementar un módulo que retorne la cantidad de jugadores cuyo DNI se encuentre entre 30.000.000 y 40.000.000.
d) Implementar un módulo que, dado una posición recibida por parámetro, retorne la cantidad de jugadores que hay en el sistema con dicha característica.  
e) Implementar un programa principal que utilice los módulos implementados e informe lo que corresponda.
Código fuente disponible en Ejercicio1.pas}

program Estadisticas_deportivas;
Uses
     sysutils;
Type
     str10= string[10];
     jugador = record
              dni: longint;
	          nombreApellido: string;
	          posicion: str10;
              puntaje: integer;
     end;

     lista = ^nodoLista;
     nodoLista = record
               dato: jugador;
               sig: lista;
     end;

     partido= record
               estadio: string;
               equipoLocal: string;
               equipoVisitante: string;
               fecha: str10;
               jugadores: lista;
     end;

     listaPartidos = ^nodoPartido;
     nodoPartido = record
               dato: partido;
               sig: listaPartidos;
     end;

//  INICIO
{DATOS DE FECHA Y PUNTAJE}
  datosp=record
    fecha:str10;
    puntaje:integer;
  end;
{LISTA DE PUNTAJES Y SUS DATOS}
listap=^nodop;
  nodop=record
   datos:datosp;
   sig:listap;
  end;
{DATOS JUGADOR Y SU LISTA DE PUNTAJE}
  datosj=record
    nombr_apell:string;
    pos:str10;
    listapuntaje:listap;
  end;
{ARBOL DE DNI CON LOS DATOS DE JUGADOR}
arbolj=^nodoj;
  nodoj=record
    dni:longint;
    jugador:datosj;
    HI:arbolj;
    HD:arbolj;
  end;

// FIN
procedure cargarFecha(var s: str10);
var
  dia, mes: integer;
begin
  dia := random(30)+1;
  mes := random(12)+1;
  if(mes = 2) and (dia > 28)then
	dia := 31;
  if((mes = 4) or (mes = 6) or (mes =9) or (mes = 11)) and (dia = 31)then
	dia := 30;
  s := Concat('2022/',IntToStr(mes),'/',IntToStr(dia));
end;

Procedure agregar(var l: listaPartidos; p: partido);
var
   aux: listaPartidos;
begin
     new(aux);
     aux^.dato := p;
     aux^.sig := l;
     l:= aux;
end;

Procedure agregarJugador(var l: lista; j: jugador);
var
   aux: lista;
begin
     new(aux);
     aux^.dato := j;
     aux^.sig := l;
     l:= aux;
end;

procedure cargarJugadores(var l: lista);
var
   j: jugador;
   cant, i, pos: integer;
begin
     cant := random(10)+22;
     for i:=1 to cant do
     begin
          with(j) do begin
              dni := random(36000000)+20000000;
	      nombreApellido:= Concat('Jugador-', IntToStr(dni));
	      pos:= random(4)+1;
              case pos of
                1: posicion:= 'arquero';
                2: posicion:= 'defensa';
                3: posicion:= 'mediocampo';
                4: posicion:= 'delantero';
              end;
              puntaje:= random(10)+1;
          end;
          agregarJugador(l, j);
     end;
end;

procedure crearLista(var l: listaPartidos);
var
   p: partido;
   cant, i: integer;
begin
     cant := random(10);
     for i:=1 to cant do
     begin
          with(p) do begin
               estadio:= Concat('Estadio-', IntToStr(random (500)+1));
               equipoLocal:= Concat('Equipo-', IntToStr(random (200)+1));
               equipoVisitante:= Concat('Equipo-', IntToStr(random (200)+1));
               cargarFecha(fecha);
               jugadores:= nil;
               cargarJugadores(jugadores);
          end;
          agregar(l, p);
     end;
end;



procedure imprimirJugador(j: jugador);
begin
     with (j) do begin
          writeln('Jugador: ', nombreApellido, ' con dni ',dni, ' en posicion: ', posicion, ' y puntaje: ', puntaje);
     end;
end;

procedure imprimirJugadores(l: lista);
begin
     while (l <> nil) do begin
          imprimirJugador(l^.dato);
          l:= l^.sig;
     end;
end;

procedure imprimir(p: partido);
begin
     with (p) do begin
          writeln('');
          writeln('Partido en el ', estadio, ' entre ',equipoLocal, ' y ', equipoVisitante, ' jugado el: ', fecha, ' por los siguientes jugadores: ');
          imprimirJugadores(jugadores);
     end;
end;

procedure imprimirLista(l: listaPartidos);
begin
     while (l <> nil) do begin
          imprimir(l^.dato);
          l:= l^.sig;
     end;
end;


//INICIO
procedure insrt_listapuntaje(var lp:listap;aux:str10;punt:integer);
var
   a:listap;
begin
  new(a);
  a^.datos.fecha:=aux;
  a^.datos.puntaje:=punt;
  a^.sig:=lp;
  lp:=a;
end;

procedure insertararbol(j:jugador;var a:arbolj;var aux:str10);
begin
  if a = nil then begin
    new(a);
    a^.Jugador.listapuntaje:=nil;
    a^.dni:=j.dni;
      a^.jugador.nombr_apell:=j.nombreApellido;
      a^.jugador.pos:=j.posicion;
      insrt_listapuntaje(a^.Jugador.listapuntaje,aux,j.puntaje);
    a^.HI:=NIL;
    a^.HD:=NIL;
  end
  else if (a^.dni > j.dni) then insertararbol(j,a^.HI,aux)
    else if (a^.dni < j.dni) then insertararbol(j,a^.HD,aux)
    else
         insrt_listapuntaje(a^.Jugador.listapuntaje,aux,j.puntaje);
end;

procedure arbolenteros(l:listapartidos;var a:arbolj);
var
   aux:str10;
  begin
    while l<>nil do begin
       aux:=l^.dato.fecha;
        while l^.dato.jugadores<>nil do begin
          insertararbol(l^.dato.jugadores^.dato,a,aux);
          l^.dato.jugadores:=l^.dato.jugadores^.sig;
        end;
      l:=l^.sig;
    end;
  end;
procedure sumalista(l:listap;var suma:integer);
begin
  suma:=0;
  while l<>nil do begin
    suma:= suma + l^.datos.puntaje;
    l:=l^.sig;
  end;
end;

Procedure jugadorEnorden( a: arbolj );
var suma:integer;
begin
  if ( a <> nil ) then begin
    jugadorEnorden (a^.HI);
    writeln ('Dni= ',a^.dni);
    writeln  ('Identificacion= ',a^.jugador.nombr_apell);
    sumalista(a^.jugador.listapuntaje,suma);
    writeln('La posicion del jugador es= ',a^.jugador.pos);
    writeln('puntaje total en los partidos= ',suma);
    writeln('----------------------------------');
    jugadorEnorden (a^.HD);
  end;
end;

Procedure recorrer( a: arbolj;var s:integer );
begin
  if ( a <> nil ) then begin
   recorrer(a^.HI,s);
    if  (a^.dni>40000000) and (a^.dni<50000000) then s:=s+1;
    recorrer(a^.HD,s);
  end;
end;


{procedure encontrar(l:lista;p:str10; var suma:integer);
begin
  suma:=0;
  while l<>nil do begin
    if (l^.dato.posicion=p) then suma:= suma +1;
    l:=l^.sig;
  end;


end;}

 Procedure encontrar( a: arbolj;var s:integer;p:str10);
begin
  if ( a <> nil ) then begin
   encontrar(a^.HI,s,p);
    if  (a^.jugador.pos = p) then s:=s+1;
    encontrar(a^.HD,s,p);
  end;
end;
var
   l: listaPartidos;
   lj:lista;
   a:arbolj;
   suma:integer;
   pos:str10;
begin
     suma:=0;
     Randomize;
     a:=nil;
     l:= nil;
     crearLista(l); {carga automática de la estructura disponible}
     writeln ('Lista generada: ');
     imprimirLista(l);
     arbolenteros(l,a);
     JugadorEnorden(a);
     recorrer(a,suma);
     writeln('');
     writeln('Los jugadores que tienen un dni mayor a 40 millones y menor a 50 millones son= ', suma);
     writeln('----------------------------------');
     write('Ingrese una posicion a la que buscar= ');
     suma:=0;
     readln(pos);
     encontrar(a,suma,pos);
     writeln('La cantidad de jugadores que juegan de la posicion ',pos,' son= ', suma);
     writeln('----------------------------------');
     writeln('Fin del programa');
     readln;
end.    