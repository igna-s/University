Program insertar_en_arbol;
Type

  // Lista de enteros
  lista = ^nodoL;
  nodoL = record
    dato: integer;
    sig: lista;
  end;

  // Arbol de enteros
  arbol= ^nodoA;
  nodoA = Record
    dato: integer;
    HI: arbol;
    HD: arbol;
  End;

  // Lista de Arboles
  listaNivel = ^nodoN;
  nodoN = record
    info: arbol;
    sig: listaNivel;
  end;


{-----------------------------------------------------------------------------
AgregarAdelante - Agrega nro adelante de l}
procedure agregarAdelante(var l: Lista; nro: integer);
var
  aux: lista;
begin
  new(aux);
  aux^.dato := nro;
  aux^.sig := l;
  l:= aux;
end;



{-----------------------------------------------------------------------------
CREARLISTA - Genera una lista con números aleatorios }
procedure crearLista(var l: Lista);
var
  n: integer;
begin
 l:= nil;
 n := random (20);
 While (n <> 0) do Begin
   agregarAdelante(L, n);
   n := random (20);
 End;
end;


{--------------------------------------istaTweets---------------------------------------
IMPRIMIRLISTA - Muestra en pantalla la lista l }
procedure imprimirLista(l: Lista);
begin
 While (l <> nil) do begin
   write(l^.dato, ' - ');
   l:= l^.sig;
 End;
end;

{-----------------------------------------------------------------------------
CONTARELEMENTOS - Devuelve la cantidad de elementos de una lista l }

function ContarElementos (l: listaNivel): integer;
  var c: integer;
begin
 c:= 0;
 While (l <> nil) do begin
   c:= c+1;
   l:= l^.sig;
 End;
 contarElementos := c;
end;

{-----------------------------------------------------------------------------
AGREGARATRAS - Agrega un elemento atrás en l}

Procedure AgregarAtras (var l, ult: listaNivel; a:arbol);
 var nue:listaNivel;

 begin
 new (nue);
 nue^.info := a;
 nue^.sig := nil;
 if l= nil then l:= nue
           else ult^.sig:= nue;
 ult:= nue;
 end;


{-----------------------------------------------------------------------------
IMPRIMIRPORNIVEL - Muestra los datos del árbol a por niveles }

Procedure imprimirpornivel(a: arbol);
var
   l, aux, ult: listaNivel;
   nivel, cant, i: integer;
begin
   l:= nil;
   if(a <> nil)then begin
                 nivel:= 0;
                 agregarAtras (l,ult,a);
                 while (l<> nil) do begin
                    nivel := nivel + 1;
                    cant:= contarElementos(l);
                    write ('Nivel ', nivel, ': ');
                    for i:= 1 to cant do begin
                      write (l^.info^.dato, ' - ');
                      if (l^.info^.HI <> nil) then agregarAtras (l,ult,l^.info^.HI);
                      if (l^.info^.HD <> nil) then agregarAtras (l,ult,l^.info^.HD);
                      aux:= l;
                      l:= l^.sig;
                      dispose (aux);
                     end;
                     writeln;
                 end;
               end;
end;

{PROCEDURE INSERTARARBOL - INSERTA UN NRO EN UN ARBOL}
procedure insertararbol(x:integer;var a:arbol);
var
   nodo:arbol;
begin
  if a = nil then begin
    new(nodo);
    nodo^.dato:=x;
    nodo^.HI:=NIL;
    nodo^.HD:=NIL;
    a:=nodo
  end
  else if a^.dato > x then insertararbol(x,a^.HI)
    else if a^.dato < x then insertararbol(x,a^.HD)
end;

 PROCEDURE IMPRIMIRXNIVEL (a:arbol);
  begin

  end;

{PROCEDURE ARBOL ENTEROS - EXTRAE DATO DE LISTA GENERADA E INSERTA EN ARBOL ORDENADO E IMPRIMO}
  procedure arbolenteros(l:lista;var AENT:arbol);
  var
     x:integer;
  begin
    while l<>nil do begin
      x:=l^.dato;
      insertararbol(x,AENT);
      l:=l^.sig;
    end;
    WRITELN ('');
    writeln('El arbol solicitado contiene los siguientes valores');
    imprimirpornivel(AENT)

  end;

 {agregarElemento - Resuelve la inserción de la estructura ordenada}
procedure agregarOrdenado(var l:lista; x:integer);
var
   nuevo, anterior, actual: lista;
begin
     new (nuevo);
     nuevo^.dato:= x;
     nuevo^.sig := nil;
     if (l = nil) then
          l := nuevo
     else
     begin
          actual := l;
          anterior := l;
          while (actual<>nil) and (actual^.dato < nuevo^.dato) do begin
               anterior := actual;
               actual:= actual^.sig;
          end;
          if (anterior = actual) then
               l := nuevo
          else
               anterior^.sig := nuevo;
          nuevo^.sig := actual;
     end;
end;
PROCEDURE agregarO (var L_ORD:lista ; L:lista);
BEGIN
  l_ord:=nil;
  while l<>nil do begin
         agregarOrdenado(l_ord,l^.dato);
         l:=l^.sig;
         end
end;

Var
 AENT,AENT2:arbol;
 l,l_ord: lista;

begin
 Randomize;

 crearLista(l);
 writeln ('Lista generada: ');
 imprimirLista(l);
 arbolEnteros(l,AENT);
 agregarO(l_ord,l) ;
 imprimirLista(l_ord);
 arbolEnteros(l_ord,AENT2);
 readln;
end.