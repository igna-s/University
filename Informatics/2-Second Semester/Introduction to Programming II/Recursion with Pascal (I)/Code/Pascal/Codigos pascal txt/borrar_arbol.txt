Program agregar_arbol;
Type

  // Lista de enteros
  lista = ^nodoL;
  nodoL = record
    dato: integer;
    sig: lista;
  end;

  // Arbol de enteros
  arbol= ^nodoA;
  nodoA = Record
    dato: integer;
    HI: arbol;
    HD: arbol;
  End;

  // Lista de Arboles
  listaNivel = ^nodoN;
  nodoN = record
    info: arbol;
    sig: listaNivel;
  end;


{-----------------------------------------------------------------------------
AgregarAdelante - Agrega nro adelante de l}
procedure agregarAdelante(var l: Lista; nro: integer);
var
  aux: lista;
begin
  new(aux);
  aux^.dato := nro;
  aux^.sig := l;
  l:= aux;
end;


procedure agregarOrdenado(var pri:lista; t:integer);
var
   nuevo, anterior, actual: lista;
begin
     new (nuevo);
     nuevo^.dato:= t;
     nuevo^.sig := nil;
     if (pri = nil) then
          pri := nuevo
     else
     begin
          actual := pri;
          anterior := pri;
          while (actual<>nil) and (actual^.dato < nuevo^.dato) do begin
               anterior := actual;
               actual:= actual^.sig;
          end;
          if (anterior = actual) then
               pri := nuevo
          else
               anterior^.sig := nuevo;
          nuevo^.sig := actual;
     end;
end;
{-----------------------------------------------------------------------------
CREARLISTA - Genera una lista con números aleatorios }
procedure crearLista(var l: Lista);
var
  n: integer;
begin
 l:= nil;
 n := random (20);
 While (n <> 0) do Begin
   agregarAdelante(l,n);
   n := random (20);
 End;
end;


{-----------------------------------------------------------------------------
IMPRIMIRLISTA - Muestra en pantalla la lista l }
procedure imprimirLista(l: Lista);
begin
 While (l <> nil) do begin
   write(l^.dato, ' - ');
   l:= l^.sig;
 End;
end;

{-----------------------------------------------------------------------------
CONTARELEMENTOS - Devuelve la cantidad de elementos de una lista l }

function ContarElementos (l: listaNivel): integer;
  var c: integer;
begin
 c:= 0;
 While (l <> nil) do begin
   c:= c+1;
   l:= l^.sig;
 End;
 contarElementos := c;
end;


{-----------------------------------------------------------------------------
AGREGARATRAS - Agrega un elemento atrás en l}

Procedure AgregarAtras (var l, ult: listaNivel; a:arbol);
 var nue:listaNivel;

 begin
 new (nue);
 nue^.info := a;
 nue^.sig := nil;
 if l= nil then l:= nue
           else ult^.sig:= nue;
 ult:= nue;
 end;


{-----------------------------------------------------------------------------
IMPRIMIRPORNIVEL - Muestra los datos del árbol a por niveles }

Procedure imprimirpornivel(a: arbol);
var
   l, aux, ult: listaNivel;
   nivel, cant, i: integer;
begin
   l:= nil;
   if(a <> nil)then begin
                 nivel:= 0;
                 agregarAtras (l,ult,a);
                 while (l<> nil) do begin
                    nivel := nivel + 1;
                    cant:= contarElementos(l);
                    write ('Nivel ', nivel, ': ');
                    for i:= 1 to cant do begin
                      write (l^.info^.dato, ' - ');
                      if (l^.info^.HI <> nil) then agregarAtras (l,ult,l^.info^.HI);
                      if (l^.info^.HD <> nil) then agregarAtras (l,ult,l^.info^.HD);
                      aux:= l;
                      l:= l^.sig;
                      dispose (aux);
                     end;
                     writeln;
                 end;
               end;
end;
procedure insertar(var a:arbol;dato:integer);
var
   nue:arbol;
begin
     if (a=nil) then begin
        new(nue);
        nue^.dato:=dato;
        nue^.HI:=nil;
        nue^.HD:=nil;
        a:=nue;
     end else if a^.dato>dato then
         insertar (a^.HI,dato)
         else if a^.dato<dato then
                  insertar (a^.HD,dato);
end;
procedure pasardatos (l:lista;var a:arbol);
begin
  while (l<>nil) do begin
    insertar(a,l^.dato);
    l:=l^.sig;
  end;
end;
PROCEDURE preOrden(a:arbol);
begin
 if (a<>nil)then begin
    preOrden (a^.HI);
    writeln (a^.dato);
    preOrden (a^.HD);
 end;
end;
procedure RecorridoAcotada(a:arbol; inf:integer; sup:integer);
begin
  if (a <> nil) then
    if (a^.dato >= inf) then
      if (a^.dato <= sup) then begin
        writeln(a^.dato);
        RecorridoAcotada(a^.HI, inf, sup);
        RecorridoAcotada(a^.HD, inf, sup);
      end
      else
        RecorridoAcotada(a^.hi, inf, sup)
    else
      RecorridoAcotada(a^.hd, inf, sup);
end;
procedure min(a:arbol;var d:integer);
begin
     if (a<>NIL) then
        if(a^.dato<d)then begin
           d:=a^.dato;
           min(a^.HI,d);
        end;
end;
procedure borrar (VAR a:arbol; d:integer);
var
   b:integer;
   aux:arbol;
begin
     if (a<>nil)then
       if(a^.dato>d)then
          borrar(a^.HI,d)
       else
           if(a^.dato<d) then
              borrar(a^.HD,d)
              else
                  if(a^.HI=nil) then begin
                    aux:=a;
                    a:=a^.HD;
                    dispose(aux);
                  end
               else
                   if (a^.HD=nil) then begin
                    aux:=a;
                    a:=a^.HI;
                    dispose(aux);
                  end
               else begin
                    min(a^.HD,b);
                    a^.dato:=b;
                    borrar(a^.HD,b);
               end;

end;

Var
 a:arbol;
 l: lista;
 b:integer;
begin
 a:=nil;
 Randomize;

 crearLista(l);
 writeln ('Lista generada: ');
 imprimirLista(l);
 pasardatos(l,a);
 imprimirpornivel(a);
 writeln('num a borrar');readln(b);
 borrar(a,b);
 imprimirpornivel(a);
 readln;
end.