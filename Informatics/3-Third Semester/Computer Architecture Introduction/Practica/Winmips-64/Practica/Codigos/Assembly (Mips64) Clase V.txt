1)Simular el siguiente programa de suma de números en punto flotante y analizar minuciosamente la ejecución paso a
paso. Inhabilitar Delay Slot y mantener habilitado Forwarding.

.data
n1: .double 9.13
n2: .double 6.58
res1: .double 0.0
res2: .double 0.0
.code
l.d f1, n1(r0)
l.d f2, n2(r0)
add.d f3, f2, f1
mul.d f4, f2, f1
s.d f3, res1(r0)
s.d f4, res2(r0)
halt


a) Tomar nota de la cantidad de ciclos, instrucciones y CPI luego de la ejecución del programa.
Ciclos: 16 ; Instrucciones: 7 ; CPI: 2.2

b) ¿Cuántos atascos por dependencia de datos se generan? Observar en cada caso cuál es el dato en conflicto y las
instrucciones involucradas.
4; 
El primero se produce porque se esta cargando la variable f2, la cual despues de la etapa mem esta disponible con fordwaarding para la alu
El segundo y tercero se produce porque la alu aun no solto la suma de f3, y esta intentando guardarla
El ultimo se prouce porque produce porque la alu aun no solto la suma de f4, y esta intentando guardarla

c) ¿Por qué se producen los atascos estructurales? Observar cuales son las instrucciones que los generan y en qué
etapas del pipeline aparecen.
Se producen porque el programa quiere acceder a memoria
El primero es porque el Add se choca con el guardado de la variable f3
El segundo es porque el Mul se choca con el guardado de la variable f4

d) Modificar el programa agregando la instrucción mul.d f1, f2, f1 entre las instrucciones add.d y mul.d.
Repetir la ejecución y observar los resultados. ¿Por qué aparece un atasco tipo WAR?
Aparece porque mul quiere modificar F2, pero esta siendo leido por ADD.D

.data
n1: .double 9.13
n2: .double 6.58
res1: .double 0.0
res2: .double 0.0
.code
l.d f1, n1(r0)
l.d f2, n2(r0)
add.d f3, f2, f1
mul.d f1, f2, f1
mul.d f4, f2, f1
s.d f3, res1(r0)
s.d f4, res2(r0)
halt


e) Explicar por qué colocando un NOP antes de la suma, se soluciona el RAW de la instrucción ADD y como
consecuencia se elimina el WAR.
Se soluciona, ya que ahora F2 esta disponible cuando es solicitado (raw), y al no estar este raw, la instruccion de decode de add.d se ejecuta despues, ya que el raw no le comio el cauce

.data
n1: .double 9.13
n2: .double 6.58
res1: .double 0.0
res2: .double 0.0
.code
l.d f1, n1(r0)
l.d f2, n2(r0)
nop
add.d f3, f2, f1
mul.d f1, f2, f1
mul.d f4, f2, f1
s.d f3, res1(r0)
s.d f4, res2(r0)
halt


2) Es posible convertir valores enteros almacenados en alguno de los registros r1-r31 a su representación equivalente
en punto flotante y viceversa. Describa la funcionalidad de las instrucciones mtc1, cvt.l.d, cvt.d.l y mfc1.

Si.
mtc1 rf, fd Copia los 64 bits del registro entero rf al registro fd de punto flotante
cvt.d.l fd, ff Convierte a punto flotante el valor entero copiado al registro ff, dejándolo en fd

mfc1 rd, ff Copia los 64 bits del registro ff de punto flotante al registro rd entero
cvt.l.d fd, ff Convierte a entero el valor en punto flotante contenido en ff, dejándolo en fd    ;Esta va antes


;3) Escribir un programa que calcule la superficie de un triángulo rectángulo de base 5,85 cm y altura 13,47 cm.
;Pista: la superficie de un triángulo se calcula como: (BXA)/2


.data
n1: .double 5.85
n2: .double 13.47
n3: .double 0

.code
l.d f1, n1(r0)
l.d f2, n2(r0)  
mul.d f2,f1,f2

daddi r1,r0,2
mtc1 r1, f1       ;Tambien se puede multiplicar x .5, con esa variable inicialmente en n3
cvt.d.l f1, f1
 
div.d f2,f2,f1
s.d f2, n3(r0)
halt


///V2///

.data
n1: .double 5.85
n2: .double 13.47
n3: .double 0.5

.code
l.d f1, n1(r0)
l.d f2, n2(r0)  
mul.d f2,f1,f2

l.d f1, n3(r0)
mul.d f2,f2,f1

s.d f2, n3(r0)
halt






4)

4) El índice de masa corporal (IMC) es una medida de asociación entre el peso y la talla de un individuo.
Se calcula a partir del peso (expresado en kilogramos, por ejemplo: 75,7 kg) y la estatura (expresada en metros,
por ejemplo 1,73 m), usando la fórmula: Peso/(estatura*estatura)


De acuerdo al valor calculado con este índice, puede clasificarse el estado nutricional de una persona en:
Infrapeso (IMC < 18,5), Normal (18,5 ≤ IMC < 25), Sobrepeso (25 ≤ IMC < 30) y Obeso (IMC ≥ 30).

Escriba un programa que dado el peso y la estatura de una persona calcule su IMC y lo guarde en la dirección
etiquetada IMC. También deberá guardar en la dirección etiquetada estado un valor según la siguiente tabla:

IMC Clasificación Valor guardado
< 18,5 Infrapeso 1
< 25 Normal 2
< 30 Sobrepeso 3
≥ 30 Obeso 4


.data
n1: .double 65,7
n2: .double 1.65
IMC: .double 0
RES: .word 0

a: .double 18.5
b: .double 25
c: .double 30


.code
l.d f1, n1(r0)
l.d f2, n2(r0)

l.d f4, a(r0)
l.d f5, b(r0)
l.d f6, c(r0)

mul.d f2,f2,f2
div.d f3,f1,f2
s.d f3, IMC(r0)

dadd r1,r0,r0
c.lt.d f3, f4
bc1f Salto2
daddi r1,r0,1 
j Salto5

Salto2: c.lt.d f3, f5
bc1f Salto3
daddi r1,r0,2 
j Salto5

Salto3: c.lt.d f3, f6
bc1f Salto4
daddi r1,r0,3 
j Salto5

Salto4: bne r1,r0, Salto5
daddi r1,r0,4

Salto5: sd r1, RES(r0)
halt



5) El procesador MIPS64 posee 32 registros, de 64 bits cada uno, llamados r0 a r31 (también conocidos como $0 a $31).
Sin embargo, resulta más conveniente para los programadores darles nombres más significativos a esos registros.
La siguiente tabla muestra la convención empleada para nombrar a los 32 registros mencionados:



Registros   Nombres             ¿Para que se los utiliza?                             ¿Preservado?
r0          $zero               retorna 0                                             si
r1          $at                 reservado para uso por el ensamblador                  -
r2-r3       $v0-$v1             valor retornado por subrutina                          -
r4-r7       $a0-$a3             argumentos para una subrutina                          -
r8-r15      $t0-$t7             temporarios para subrutinas                            -
r16-r23     $s0-$s7             variables de subrutinas. Preservar sus valores        si
r24-r25     $t8-$t9             temporarios para subrutinas                            -
r26-r27     $k0-$k1             usados por manejador de interrupciones/trap            - 
R28         $gp                 puntero global (acceso a var static/extern)           si
R29         $sp                 puntero de pila                                       si
R30         $fp                 noveno registro de variable o frame pointer           si
R31         $ra                 retorno de subrutina                                   -


Complete la tabla anterior explicando el uso que normalmente se le da cada uno de los registros nombrados. Marque
en la columna “¿Preservado?” si el valor de cada grupo de registros debe ser preservado luego de realizada una
llamada a una subrutina.



6)Como ya se observó anteriormente, muchas instrucciones que normalmente forman parte del repertorio de un
procesador con arquitectura CISC no existen en el MIPS64. En particular, el soporte para la invocación a subrutinas
es mucho más simple que el provisto en la arquitectura x86 (pero no por ello menos potente). El siguiente programa
muestra un ejemplo de invocación a una subrutina.



.data
valor1: .word 16
valor2: .word 4
result: .word 0

.text
ld $a0, valor1($0)     ;arguments
ld $a1, valor2($0)
jal a_la_potencia
sd $v0, result($0)     ;value returned
halt

a_la_potencia: daddi $v0, $zero, 1
lazo: slt $t1, $a1, $zero                ;temporally
bnez $t1, terminar
daddi $a1, $a1, -1
dmul $v0, $v0, $a0
j lazo
terminar: jr $ra                       ; return address

a) ¿Qué hace el programa? ¿Cómo está estructurado el código del mismo?
Eleva a valor1 a la potencia de valor2    .... Muy feo

b) ¿Qué acciones produce la instrucción jal? ¿Y la instrucción jr?
Jump And Link, Salta y guarda en $ra la direccion de retorno
Jump & Return, Salta a la direccion contenida en $ra

c) ¿Qué valor se almacena en el registro $ra? ¿Qué función cumplen los registros $a0 y $a1? ¿Y el registro $v0?
ra tiene la direccion de retorno de la subrutina
a0 y a1 tienen los argumentos que se mandan a la subrutina
v0 tienen el valor de retorno

d) ¿Qué sucedería si la subrutina a_la_potencia necesitara invocar a otra subrutina para realizar la multiplicación,
por ejemplo, en lugar de usar la instrucción dmul? ¿Cómo sabría cada una de las subrutinas a que dirección de
memoria deben retornar?
Si esta mal hecho, explota
Se deberia reemplazar el ra en otro registro antes del llamado JAL de la segunda subrutina, y devolverlo a su lugar despues del retorno de la misma


;7) Escriba una subrutina que reciba como parámetros un número positivo M de 64 bits, la dirección del comienzo de una
;tabla que contenga valores numéricos de 64 bits sin signo y la cantidad de valores almacenados en dicha tabla.
;La subrutina debe retornar la cantidad de valores mayores que M contenidos en la tabla


.data
M: .word 1
TABLA: .word 1,2,3,4,5,6,7,8,9,10
CANT: .word 10
RES: .word 0

.code

ld $a0, M($zero)                       ;Valores
daddi $a1,$zero,TABLA
ld $a2, CANT($zero)

slti $t3,$a0,0                         ;Chequeo M positivo
bne $t3, $zero, Chau

jal Subrutina
sd $v0,RES($zero)                     ;Llamo a Subrutina
Chau: halt

;-----------------------------
Subrutina: dadd $t0,$zero,$a1          ;Subrutina
Lazo: beq $a2,$zero,Fin

ld $t1, 0($t0)

beq $a0, $t1, EsMenor                   ;Se fija si es igual y despues si es menor
slt $t3, $a0, $t1

beq $t3,$zero, EsMenor                  ;Sumo si es true
daddi $v0,$v0,1

EsMenor: daddi $a2,$a2,-1                ;Regreso
daddi $t0,$t0,8
j Lazo
Fin: jr $ra



;8) Escriba una subrutina que reciba como parámetros las direcciones del comienzo de dos cadenas terminadas en cero y
;retorne la posición en la que las dos cadenas difieren. En caso de que las dos cadenas sean idénticas, debe retornar -1.


.data
Tabla: .asciiz "SEXOOOOOOO"
ALBAT: .asciiz "SEXOOOOOOO"
RES: .word 999

.code
daddi $a0, $zero, Tabla
daddi $a1, $zero, ALBAT

jal Subrutina
sd $v0, RES($zero)
halt



;-----------------------------------

Subrutina:  daddi $t2, $zero,1      ;Cargo
Lazo: lb $t0, 0($a0)
      lb $t1, 0($a1)

bne $t0, $t1, Malo                    ;Si son distintos salgo
beq $t0, $zero, Bueno                 ;Si son iguales y uno de ellos =0 True
daddi $t2,$t2,1
daddi $a0,$a0,1                       ;Sumo 1 y reinicio
daddi $a1,$a1,1
j Lazo

Bueno: daddi $v0,$zero,-1
j Fin

Malo: dadd $v0,$zero,$t2
Fin: jr $ra


;9) El siguiente programa espera usar una subrutina que calcule en forma recursiva el factorial de un número entero:


.data
valor: .word 10
result: .word 0

.text
daddi $sp, $0, 0x400 ; Inicializa el puntero al tope de la pila (1)
ld $a0, valor($0)
jal factorial
sd $v0, result($0)
halt

;--------------------------------------

factorial: bne $a0,$zero, Sigo    
           daddi $v0,$zero,1       ;Caso Base
           j Fin

     Sigo: daddi $sp,$sp,-16
           sd $ra, 0($sp)
           sd $a0, 8($sp)
        
           daddi $a0,$a0,-1        ;Recursion
           jal factorial

           ld $ra, 0($sp)
           ld $a0, 8($sp)
           daddi $sp,$sp,16
           dmul $v0,$v0,$a0       ;Instruccion de Multi
           
        Fin: jr $ra

;a) Implemente la subrutina factorial definida en forma recursiva. Tenga presente que el factorial de un número
;entero n se calcula como el producto de los números enteros entre 1 y n inclusive:
;factorial(n) = n! = n x (n-1) x (n-2) x … x 3 x 2 x 1

;b) ¿Es posible escribir la subrutina factorial sin utilizar una pila? Justifique.

;Es posible hacer una subrutina factorial iterativa, dicho esto, si se quiere recursiva, No



////v2/////


;9) El siguiente programa espera usar una subrutina que calcule en forma recursiva el factorial de un número entero:


.data
valor: .word 10
result: .word 0

.text
daddi $sp, $0, 0x400 ; Inicializa el puntero al tope de la pila (1)
ld $a0, valor($0)
jal factorial
sd $v0, result($0)
halt

;--------------------------------------

factorial: bne $a0,$zero, Sigo    
           daddi $v0,$zero,1       ;Caso Base
           j Fin

     Sigo: daddi $sp,$sp,-8
           sd $ra, 0($sp)
        
           daddi $a0,$a0,-1        ;Recursion
           jal factorial

           daddi $a0,$a0,1
           dmul $v0,$v0,$a0       ;Instruccion de Multi

           ld $ra, 0($sp)
           daddi $sp,$sp,8
           
           
        Fin: jr $ra
